A subarray is a continuous part of array.

Yarik recently found an array a
 of n
 elements and became very interested in finding the maximum sum of a non empty subarray. However, Yarik doesn't like consecutive integers with the same parity,
so the subarray he chooses must have alternating parities for adjacent elements.

For example, [1,2,3]
 is acceptable, but [1,2,4]
 is not, as 2 and 4 are both even and adjacent.

You need to help Yarik by finding the maximum sum of such a subarray.









import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner yt = new Scanner(System.in);

        int n = yt.nextInt();
        while (n-->0) {
            int x = yt.nextInt();
            int []arr = new int[x];


          for(int i = 0;i<x;i++){
            arr[i] = yt.nextInt();
          }
            int sum = arr[0];
          int max = arr[0];

            for(int i = 1;i<x;i++){
                if(sum<0){
                    sum = 0;
                }
                sum+=arr[i];
                if(sum<0||Math.abs(arr[i-1])%2==Math.abs(arr[i]%2)){
                    sum = arr[i];
                }
                max = Math.max(max,sum);
            }
            System.out.println(max);

        }

    }
}


